[Semantic analysis]

//funccall -> 

compound_statement: 
      '{' '}'
    | '{' statement '}'
    | '{' statement statements '}'

 statement: 
      print_statement
    | declaration
    | assignment_statement
    | if_statement
    | while_statement
    | for_statement
    | return_statement

print_statement: 'print' expression ';'

declaration: 'int' IDENTIFIER ';'

return_statement: 'return' '(' expression ')'  ;

assignment_statement: IDENTIFIER '=' expression ';'

if_head: 'if' '(' true_false_expression ')' compound_statement
if_statement: 
      if_head
    | if_head 'else' compound_statement

while_statement: 'while' '(' true_false_expression ')' compound_statement

for_statement: 'for' '(' preop_statement ';' true_false_expression ';' postop_statement ')' compound_statement
preop_statement:  statement
postop_statement: statement
function_declaration: 'void' IDENTIFIER '(' ')' compound_statement

expression: additive_expression
 
prefix_expression: primary
    | '*' prefix_expression
    | '&' prefix_expression

additive_expression:
      multiplicative_expression
    | additive_expression '+' multiplicative_expression
    | additive_expression '-' multiplicative_expression

multiplicative_expression:
      NUMBER
    | NUMBER '*' multiplicative_expression
    | NUMBER '/' multiplicative_expression

NUMBER:     TOKEN_INT
IDENTIFIER: TOKEN_IDENTIFIER