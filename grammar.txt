[Semantic analysis]

//funccall -> 

compound_statement: 
      '{' '}'
    | '{' statement '}'
    | '{' statement statements '}'

 statement: 
      print_statement
    | declaration
    | assignment_statement
    | if_statement
    | while_statement
    | for_statement
    | return_statement

print_statement: 'print' expression ';'

global_declarations: global_declaration | global_declaration global_declarations

global_declaration: function_declaration | variable_declaration

 variable_declaration 
    : type identifier ';'
    | type identifier '[' P_INTLIT ']' ';'

function_declaration: type IDENTIFIER '(' ')' compound_statement

type: type_keyword opt_pointer

type_keyword: 'void' | 'char' | 'int' | 'long'

opt_pointer: <empty> | '*' opt_pointer

identifier_list: IDENTIFIER | IDENTIFIER ',' identifier_list

return_statement: 'return' '(' expression ')'  ;

assignment_statement: IDENTIFIER '=' expression ';'

if_head: 'if' '(' true_false_expression ')' compound_statement
if_statement: 
      if_head
    | if_head 'else' compound_statement

while_statement: 'while' '(' true_false_expression ')' compound_statement

for_statement: 'for' '(' preop_statement ';' true_false_expression ';' postop_statement ')' compound_statement
preop_statement:  statement
postop_statement: statement

expression: additive_expression

additive_expression:
      multiplicative_expression
    | additive_expression '+' multiplicative_expression
    | additive_expression '-' multiplicative_expression

multiplicative_expression:
      NUMBER
    | NUMBER '*' multiplicative_expression
    | NUMBER '/' multiplicative_expression

primary_expression
        : IDENTIFIER
        | CONSTANT
        | STRING_LITERAL
        | '(' expression ')'

postfix_expression
        : primary_expression
        | postfix_expression '[' expression ']'
        | postfix_expression '(' expression ')'
        | postfix_expression '++'
        | postfix_expression '--'

prefix_expression
        : postfix_expression
        | '++' prefix_expression
        | '--' prefix_expression
        | prefix_operator prefix_expression

prefix_operator : '&' | '*' | '-' | '~' | '!'

NUMBER:     TOKEN_INT
IDENTIFIER: TOKEN_IDENTIFIER